name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22', '1.23', '1.24']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Download dependencies
      run: |
        go mod download
        go mod verify

    - name: Run go fmt
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Go code is not formatted:"
          gofmt -d .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: go test -v ./...

    - name: Run tests with race detector
      run: go test -race ./...

    - name: Generate coverage report
      run: |
        go test -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -func=coverage.out

    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.go-version }}
        path: |
          coverage.out
        retention-days: 30

    - name: Upload coverage to Codecov (optional)
      if: matrix.go-version == '1.24'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build binary
      run: |
        make build
        ls -lh bin/

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: server-binary
        path: bin/server
        retention-days: 7

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        tags: timeservice:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true

    - name: Test Docker image
      run: |
        echo "Docker image size:"
        docker images timeservice:latest --format "{{.Size}}"
        echo ""
        echo "Testing container startup..."
        docker run --rm timeservice:latest --help || true
        echo ""
        echo "Inspecting non-root user..."
        docker run --rm timeservice:latest sh -c 'id' 2>/dev/null || echo "Running as non-root user (expected)"

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: timeservice:latest
        format: 'sarif'
        output: 'trivy-image-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-image-results.sarif'
        category: 'trivy-container-scan'
      continue-on-error: true

    - name: Run Trivy vulnerability scanner (table output)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: timeservice:latest
        format: 'table'
        severity: 'CRITICAL,HIGH,MEDIUM'
      continue-on-error: true

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v4
      with:
        image: timeservice:latest
        fail-build: false
        severity-cutoff: high
        output-format: sarif

    - name: Upload Grype results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}
        category: 'grype-container-scan'
      continue-on-error: true

    - name: Docker Scout CVE scan
      uses: docker/scout-action@v1
      with:
        command: cves
        image: timeservice:latest
        only-severities: critical,high
        sarif-file: scout-results.sarif
      continue-on-error: true

    - name: Upload Docker Scout results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: scout-results.sarif
        category: 'docker-scout-scan'
      continue-on-error: true

    - name: Save Docker image as artifact
      run: |
        docker save timeservice:latest | gzip > timeservice-image.tar.gz

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: timeservice-image.tar.gz
        retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: ./...
      continue-on-error: true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
