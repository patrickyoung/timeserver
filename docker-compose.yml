version: '3.8'

services:
  timeservice:
    build:
      context: .
      dockerfile: Dockerfile
    # Note: While 'latest' is acceptable for local dev, we use versioned tags for consistency
    # This matches the production k8s deployment which uses timeservice:v1.0.0
    image: timeservice:v1.0.0
    container_name: timeservice

    # Security: Run as non-root user (already set in Dockerfile)
    # user: "10001:10001"  # Redundant, already USER appuser in Dockerfile

    # Security: Read-only root filesystem
    read_only: true

    # Security: Drop all capabilities
    cap_drop:
      - ALL

    # Security: Prevent privilege escalation
    security_opt:
      - no-new-privileges:true

    # Tmpfs for temporary files (since root filesystem is read-only)
    tmpfs:
      - /tmp:noexec,nosuid,size=10M

    # Volume mount for database persistence
    # The database file is stored in a named volume for data persistence across restarts
    # To backup: docker run --rm -v timeservice-data:/data -v $(pwd)/backups:/backup alpine tar czf /backup/timeservice-data-$(date +%Y%m%d).tar.gz -C /data .
    # To restore: docker run --rm -v timeservice-data:/data -v $(pwd)/backups:/backup alpine tar xzf /backup/timeservice-data-YYYYMMDD.tar.gz -C /data
    volumes:
      - timeservice-data:/app/data

    # Port mapping (host:container)
    ports:
      - "8080:8080"

    # Environment variables
    environment:
      - PORT=8080
      # SECURITY: Set explicit CORS origins for production
      # For dev: use ALLOW_CORS_WILDCARD_DEV=true
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080

      # Database configuration
      - DB_PATH=/app/data/timeservice.db
      - DB_MAX_OPEN_CONNS=25
      - DB_MAX_IDLE_CONNS=5
      - DB_CACHE_SIZE_KB=64000
      - DB_WAL_MODE=true

      # SECURITY: Authentication (disabled by default for backward compatibility)
      # To enable auth, uncomment the lines below and configure your OIDC provider:
      # - AUTH_ENABLED=true
      # - OIDC_ISSUER_URL=https://your-auth-provider.example.com
      # - OIDC_AUDIENCE=timeservice
      # - AUTH_PUBLIC_PATHS=/health,/,/metrics
      # - AUTH_REQUIRED_ROLE=time-reader
      # See docs/SECURITY.md for detailed setup instructions

    # Restart policy
    restart: unless-stopped

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

    # Health check using dedicated probe binary
    healthcheck:
      test: ["CMD", "/app/healthcheck"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    # Labels for Prometheus service discovery
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=8080"
      - "prometheus.path=/metrics"

# Named volumes for data persistence
volumes:
  timeservice-data:
    driver: local
    # Optional: Specify driver options for different backends
    # driver_opts:
    #   type: none
    #   device: /path/to/local/directory
    #   o: bind
